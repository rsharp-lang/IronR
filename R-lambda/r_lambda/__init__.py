#!/usr/bin/python3

from r_lambda import shell
from r_lambda import r_env

def call_lambda(func, 
                argv = None, 
                options = None,
                workdir = "./",
                docker = None, 
                run_debug = False):
    
    """Invokes an R# lambda function locally or within a Docker container.

    This function handles environment configuration, executes the target R# function via shell commands,
    and supports both local and containerized execution. Runtime parameters and configurations are
    serialized to JSON files in the working directory's `.r_env` subfolder.

    Args:
        func (str): [Required] Target R# function name in `pkg::function` format.
        argv (dict | list, optional): Parameters for the R# function. Accepts dictionary (key-value pairs)
            or list (CLI-style arguments). Defaults to empty dict if None.
        options (dict, optional): Runtime configuration options for R# environment. Influences behavior
            of `getOption()` within R#. Defaults to empty dict if None.
        workdir (str, optional): Working directory for execution. Configuration files will be written to
            `workdir/.r_env`. Defaults to current directory ("./").
        docker (dict, optional): Docker configuration generated by `docker_image()` helper. If provided,
            executes in container; otherwise runs locally. Defaults to None.
        run_debug (bool, optional): Enable debug mode. When True, prints execution details but skips
            actual command execution. Defaults to False.

    Returns:
        int: Shell exit code from command execution. Returns 0 on success, non-zero for errors.

    Side Effects:
        - Creates `.r_env` subdirectory in `workdir` with JSON configuration files (`run.json`, `options.json`)
        - Modifies working directory during local execution (restores original post-execution)
        - May create temporary Docker containers if `docker` parameter is provided

    Example:
        >>> # Local execution example
        >>> call_lambda(
                func="MyPackage::ProcessData",
                argv=["--input", "data.csv", "--threshold", "0.5"],
                options={"lang": "R#", "debug": True},
                workdir="./analysis"
            )

        >>> # Docker execution example
        >>> docker_config = docker_image(
                id="rsharp/runtime:latest",
                volumn=["/data/inputs"],
                shm_size="2g"
            )
        >>> call_lambda(
                func="DataPkg::CleanDataset",
                argv={"input_file": "/data/inputs/raw.csv"},
                docker=docker_config
            )
    """

    # default has no arguments
    if argv is None: argv = {}
    if options is None: options = {}

    r_env.save_configs(argv, options, workdir)
    r_lambda = None 

    if docker is None:
        r_lambda = shell.local_shell(argv, options, workdir)
    else:
        r_lambda = shell.docker_run(argv, options, docker, workdir)

    return r_lambda.call_lambda(func, run_debug = run_debug)